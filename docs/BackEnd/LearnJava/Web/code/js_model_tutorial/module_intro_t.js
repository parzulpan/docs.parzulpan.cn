// 模板简介



// 什么是模块
// 一个模块就是一个文件，通常包含着一个类或者一个函数库，一个脚本就是一个模块
// 模块可以相互加载，并可以使用特殊的自然export和import来交换功能，从另一个模块调用一个模块的函数
// 1. export关键字标记了可以从当前模块外部访问的变量和函数
// 2. import关键字允许从其他模块导入功能
import {ucFirst} from './string_t';
console.log(ucFirst);



// 模块核心功能
// 与"常规"脚本相比，模块有什么不同呢？
// 1. 始终使用"use strict"

// 2. 模块级作用域
// 每个模块都有自己的顶级作用域，即一个模块中的顶级作用域变量和函数在其他脚本中是不可见的

// 3. 模块代码仅在第一次导入时被解析
// 如果同一个模块被导入到多个其他位置，那么它的代码仅会在第一次导入时执行，然后将导出(export)的内容提供给所有的导入(importer)

// 4. import.meta
// import.meta对象包含关于当前模块的信息，它的内容取决于其所在的环境

// 5. 在一个模块中，"this"是undefined
// 在一个模块中，顶级this是undefined



// 浏览器特定功能
// 与常规脚本相比，用于type="module"标识的脚本有一些特定于浏览器的差异
// 1. 模板脚本是延迟的
// 1.1 下载外部模块脚本<script type="module" src="...">不会阻塞HTML的处理，它们会与其他资源并行加载
// 1.2 模块脚本会等到HTML文档完全准备就绪，然后才会允许
// 1.3 保持脚本的相对顺序，在文档中排在前面的脚本先执行

// 2. Async适用于内联脚本(inline script)
// 对于非模块脚本，async仅适用于外部脚本，异步脚本会在准备好后立即运行，独立于其他脚本或者HTML文档
// 对于模块脚本，它也适用于内联脚本

// 3. 外部脚本
// 具有 type="module" 的外部脚本（external script）在两个方面有所不同
// 3.1 具有相同 src 的外部脚本仅运行一次
// 3.2 从另一个源（例如另一个网站）获取的外部脚本需要 CORS header

// 4. 不允许裸模块(“bare” module)
// 在浏览器中，import 必须给出相对或绝对的 URL 路径。没有任何路径的模块被称为“裸（bare）”模块。在 import 中不允许这种模块



// 构建工具
// 在实际开发中，浏览器模块很少被以“原始”形式进行使用。
// 通常，会使用一些特殊工具，例如 Webpack，将它们打包在一起，然后部署到生产环境的服务器。
// 构建工具会做以下事：
// 1. 从一个打算放在HTML中的<script type="module"> "主"模块开始
// 2. 分析它的依赖：它的导入，以及它的导入的导入等
// 3. 使用所有模块构建一个文件(或者多个文件，这是可调的)，并且打包函数替代原生import调用，以使其正常工作，还支持像 HTML/CSS 模块等"特殊"的模块类型
// 4. 在处理过程中，可能非应用其他转换和优化
// 4.1 删除无法访问的代码
// 4.2 删除未使用的导出
// 4.3 删除特定于开发的像console和debugger这样的语句
// 4.4 可以使用Babel将前沿的现代的JS语法转换为具有类似功能的旧JS语法
// 4.5 压缩生成的文件(删除空格，用短的名字替换变量等)